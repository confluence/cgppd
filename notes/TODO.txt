--------------------------------------------------------------------------------
NOW
--------------------------------------------------------------------------------

* use FLEXIBLE_LINKS flag in CUDA code; put back the old version if linkers are not enabled.
* make sure that the change has been made in all the options
* potential test for repulsive LJ -- add options for no LJ / repulsive LJ to python script

THINGS THAT PROBABLY NEED TO BE CHECKED

* check if compensated summation explains the discrepancy between the reference conformation values in the thesis and the implementation.
* fix chain processing
* remove printing of old cruft about translation/rotation
* 300k replica -- how is it found if there isn't one?!
* paircount needs to be updated for flexible linkers
* What happens if molecule consists of multiple chains?
* make sure all the non-crowders are actually loaded before all the crowders (don't rely on the input file to be correct)

WRITE THESIS

* start with design / implementation chapter

MAIL ROB

* Units! Where do they come from? Are any conversions required for the linker components?
* Is the flex move actually a valid extension of the model? Does the polymer test demonstrate that?
* Should we include the last *two* rigid residues when calculating the torsion? There's still one degree of freedom. Keep the way it is for now; ask Rob.

--------------------------------------------------------------------------------
SOON
--------------------------------------------------------------------------------

MUTATIONS/WRAPPING

* Write unit tests for all the mutations. Seriously, we need those.

* Refactor all the wrapping stuff, because it's terrible
    * Split two boundary types
        * at the start, calculate new center and reject the move if boundary is spherical and center is too large
        * then do everything
        * at the *end*, if the boundary is periodic, calculate the wrapped center and wrap the molecule if necessary
            * but this can still result in residues being moved twice in e.g. flex move
            * does that really matter?
            * Make an effort always to update the relative position and then the absolute position -- eliminate recalculate_relative_positions
            * If we do that, moving twice for wrapping won't be a problem -- just calculate the absolute position once after wrapping!

TEST

* stuff that's disabled
    * Kahan sums
    * asynchronous CUDA

POSTPROCESS

* write it completely separately in Python

OPTIONS

* add possibility to individually enable / disable all the MC mutations?
    * would be useful to disable whole-molecule translation / rotation for individual molecule tests
    * and to disable flex moves if rigid domains should be static relative to each other

REFACTOR

* Linkers, etc. don't actually *need* to be arrays. Just keep them as vectors.
* is it really necessary to use custom vector3f and vector3d types?
* is it really necessary to use size_t for iterators instead of int?

* Reorder methods and attributes, especially in header.  SETUP, MC MOVES, POTENTIAL CALCULATION

* MOLECULE: constructor / destructor
    * reserveResidueSpace not consistently used?
    * maybe use init from pdb function with rotation / translation params?
    * make Molecule::rotate call Molecule::setRotation, etc.?
* AMINO ACIDS
    * clean up read from file

--------------------------------------------------------------------------------
LATER / MAYBE
--------------------------------------------------------------------------------

CLEANUP

* Remove completely unused sections of code? Look at the CUDA code. etc.; see what is actually connected up. Are we ever going to use CUDA MC?


OPTIMISE / TEST

* is caching of internal potential subtotals important? Probably still useful for CPU LJ/DH code.
* is it *actually* worth summing vector components separately?

ADD

* Multiple GPUs?  Does that work?
