--------------------------------------------------------------------------------
RIGHT NOW
--------------------------------------------------------------------------------

OTHER REFACTORING / TESTS
    * collect statistics of acceptance / rejection; compare sync and async; make sure nothing suspicious is happening
		* see if acceptance ratio file length still fluctuates
        * see if everything works with multiple replicas

    * eliminate potential.increment; use new +=

    * It would be really nice for testing if sync/async and linkers/rigid were runtime options instead of preprocessor directives. Is there any reason not to do this?
        * Eliminate the MCSearch method and make everything call the async sub-methods

    * also rework the cpu potential; include the internal unbonded stuff in the replica code and kill that part of the molecule code; explicitly make the molecule E for bonded potential only.
            
    * rework diubiquitin creation script to do the molecules the more sensible way around and also add a fake sidechain
    * more extensive potential unit tests: add potential test with all the weird geometry features, i.e. diubiquitin with one molecule and two chains. Maybe two diubiquitin, so we have two molecules with two chains each and can test absolutely everything.
    * Why are the async sample times different? Different grouping? Why are the intervals irregular? This may be working as intended; will need to compensate in unit test.
    * check if everything in the threads is still threadsafe. Have we actually run the code with multiple threads?
    * check if magnitude of bonded components is correct
        * actually, do we have any results for the bonded components from Kim?
        * could the tiny discrepancy from Kim's results be due to additional nonbonded components from inside segments? (There would be no inter-domain contribution because Kim & Hummer's model doesn't have a flex move).

    * clean up potential for inside the molecule -- incorporate everything into a single loop in the replica
    * unit test for parsing various input files (amino acids, torsions, etc..)
    * clean up output files as much as possible
        * put a separate ABOUT file with compilation options in the directory instead of appending suffixes and putting crap in the PDB files
        * stop outputting rotation / translation (no longer relevant)
            * but only if compiled with flexible linkers?
    * clean up crappy Potential internals now that there are unit tests?
    * current homemade logging sucks. Replace with google-glog?

SIMULATIONS
* diubiquitin simulations -- once the segment code is fixed
    * DON'T FORGET to make a fake side-chain out of alanine

THESIS
* skeleton for design / implementation chapter
* write foundations chapter

--------------------------------------------------------------------------------
NOW
--------------------------------------------------------------------------------

MODEL CORRECTNESS
* potential is now much (?) bigger because of the bonded components -- that is likely to affect calculation of the bound state. Should it be this high? Are the units correct? Also including the potential from inside proteins should raise the total (right)?
    * analyse potential breakdown (from CPU-only version)
* Are any conversions required for the linker components?

CLEANUP / BUGFIX
* remove probably pointless optimisations like summing vector components separately (since we don't do this everywhere anyway)
* remove unused code for e.g. old kernels and MC on the GPU
* fix chain processing
    * use chain names if they exist
    * fix old PDB files with chain id in the wrong place (WTF)
* remove printing of old cruft about translation/rotation
* make sure all the non-crowders are actually loaded before all the crowders (don't rely on the input file to be correct)

--------------------------------------------------------------------------------
SOON
--------------------------------------------------------------------------------

TEST
* stuff that's disabled
    * Kahan sums -- sort of tested; no difference apparent

OPTIONS
* add possibility to individually enable / disable all the MC mutations?
    * would be useful to disable whole-molecule translation / rotation for individual molecule tests
    * and to disable flex moves if rigid domains should be static relative to each other

VALIDATION
* should we try crankshaft moves with more residues, and see if this improves the repulsive LJ results?

REFACTOR
* is it really necessary to use custom vector3f and vector3d types?
* is it really necessary to use size_t for iterators instead of int?
* Reorder methods and attributes, especially in header.  SETUP, MC MOVES, POTENTIAL CALCULATION
* MOLECULE: constructor / destructor
    * reserveResidueSpace not consistently used?
* AMINO ACIDS
    * clean up read from file

SIMULATIONS
* redo Ian's tail/no tail simulations with flexible tail; replicate post-processing used in original thesis

BENCHMARKING
* do simulations with linkers give better results than rigid simulations? (What does "better" mean?)
* how much overhead is caused by the flexible linkers (on the CPU and on the GPU)?

--------------------------------------------------------------------------------
LATER / MAYBE
--------------------------------------------------------------------------------

OPTIMISATION
* why not precalculate the LJ coefficients which are independent from r?
    * We could definitely at least store Eij instead of eij.
    * How much extra storage / memory transfer overhead would be required for 3 coefficients (3EijSigij, 2Eij and 2^(1/6)Sigij)?
    * Maybe do it and test it? float3 table instead of float.
* Maybe leave this for last; possibly just mention it as a future direction instead of doing it

CLEANUP
* Remove dependence on cutil, which is not supposed to be used in production.
    * Need timers and a way to check CUDA errors?
    * Possibly read the cutil source code and reimplement these?
    * New SDK should have new helper functions
    * but we need to extract it from the single-file installer somehow

ADD
* Multiple GPUs?  Does that work?  It should just work.
