--------------------------------------------------------------------------------
NOW
--------------------------------------------------------------------------------

VERY NEXT THING:


Argh, more potential reimplementation fixes:
* for consistency with C++ version, include previous residue in angle and torsion calculations (need to update segment algorithm)
* Why is the internal DH wrong?!
* Should we include the last *two* rigid residues when calculating the torsion? There's still one degree of freedom.

* Add correct handling for internal LJ/DH for unit tests
* Eventually, Molecule E shouldn't handle LJ/DH at all
    * Replica CPU E should be altered to handle it as well as the GPU E
    * Temporarily need to make it do the right thing for tests
    * Just add a test for a flexible version of the first test conformation
    * later make sure that the right option is selected

* It should be possible to force rigidity at runtime
* Set a rigid flag on the replica; override rigid identifier on all molecules passed to gpu if necessary

* OK, new plan:
    * add temporary pos and meta variables to combine most of the shared / texture mem lines -- DONE?
    * load the meta earlier (if texture mem; currently that isn't the case)
    * now both values will be available in the outer conditional and we don't have to do anything hacky
    * pos.w = mol id or padder flag. meta.w = res id or crowder flag or rigid flag (-3? -4?)
    * if (molecules same and (molecule is rigid or residues are neighbouring) or padder, do nothing
    * if (ypos.w == pos.w && (ymeta.w == RIGID_IDENTIFIER || abs(ymeta.w - meta.w) <= 4)) || pos.w == PADDER_IDENTIFIER
    * is the crowder handling in the optimal place?

* TO CHANGE:
    * pass in the right values from Replica
    * changes to kernel


* linker validation tests:
    * polyalanine with increasing polymer length (using single replica at first; will see how it goes)


   N LJ REP LJ OFF
---------------------------------
   4    X
   8    X
  16    X
  32    X
  64    X?
 128    X?
 256    X?
 512    X
1024
2048

* Write unit tests for all the mutations. Seriously, we need those.

* Refactor all the wrapping stuff, because it's terrible
    * Split two boundary types
        * at the start, calculate new center and reject the move if boundary is spherical and center is too large
        * then do everything
        * at the *end*, if the boundary is periodic, calculate the wrapped center and wrap the molecule if necessary
            * but this can still result in residues being moved twice in e.g. flex move
            * does that really matter?
            * Make an effort always to update the relative position and then the absolute position -- eliminate recalculate_relative_positions
            * If we do that, moving twice for wrapping won't be a problem -- just calculate the absolute position once after wrapping!

* check if compensated summation explains the discrepancy between the reference conformation values in the thesis and the implementation.

* fix chain processing
* remove printing of old cruft about translation/rotation

* validation
    * rename the reference conformations test, since it is actually useful
    * test that potential is the same for rigid protein with and without linkers enabled

* tests
    * fix crappy old tests

* assuming that there is always a 300k replica after all; check the maths
* paircount needs to be updated for flexible linkers

* start writing up
    * skeleton
    * design / implementation of changes chapter

TEST

* better unit tests of important simulation and replica functions
* use and test init function for replica


--------------------------------------------------------------------------------
SOON
--------------------------------------------------------------------------------

TEST

* stuff that's disabled, e.g. Kahan sums

POSTPROCESS

* write it completely separately in Python

OPTIONS

* make flex and crankshaft moves optional

REFACTOR

* Linkers, etc. don't actually *need* to be arrays. Just keep them as vectors.
* is it really necessary to use custom vector3f and vector3d types?
* is it really necessary to use size_t for iterators instead of int?

* Reorder methods and attributes, especially in header.  SETUP, MC MOVES, POTENTIAL CALCULATION

* MOLECULE: constructor / destructor
    * reserveResidueSpace not consistently used?
    * maybe use init from pdb function with rotation / translation params?
    * make Molecule::rotate call Molecule::setRotation, etc.?
* AMINO ACIDS
    * clean up read from file

--------------------------------------------------------------------------------
LATER / MAYBE
--------------------------------------------------------------------------------

TWISTER

* make sure all the non-crowders are actually loaded before all the crowders (don't rely on the input file to be correct)
* single rng for all replicas
    * CAUTION: this may be a problem because of threading (safety and/or performance). Look into it in greater detail.

ADD

* Extra MC moves (just domain rotation?) on GPU?
* Make angle terms, crankshaft moves optional; test efficiency / accuracy of including them
* Make flexing optional; doesn't really work in cases with flexible loops coming out of domains.
* Validation with a simple test case
* Is the caching stuff actually a good idea, or is it just overhead?
    * Write another version of the CPU bond calculation, which throws out the caching and calculates everything
* What happens if molecule consists of multiple chains?

CHECKPOINTING

* put checkpointing back in
    * save individual pdb files
    * save checkpointing file with list of pdb files to load and iteration count
    * when resuming, make sure the iteration count is increased and e.g. sampling starts immediately if it needs to
    * save/load:
        * parameters.currentStep
        * per-replica cumulative data (same stuff that is swapped during replica exchange)
        * per-simulation cumulative data (total tests and exchanges)

OPTIMISE / TEST

* is caching of internal potential subtotals important?

* is it *actually* worth summing vector components separately?

* init of gpu memory seems slower (underlying software change?)

* Now that there's more time, try doing stuff on GPU:
    * one molecule only (since only one molecule will have internal changes?)
    * but then we have to cache at the molecule level at least, so that potential comparison works
    * LJ/DH seems like a really good idea
    * single kernel based on segments, or aditional kernel just for internal segments?
    * Friedrichs, et al.have a kernel for bonded forces

ADD

* Multiple GPUs?  Does that work?
