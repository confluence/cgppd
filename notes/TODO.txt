SOONEST

* run diubiquitin simulations a few more times (5?) to see if results are consistent
* fix clustering script; use replica closest to 300K
* try clustering results in vmd; compare to g_cluster
* finish fixing plotting scripts. Decouple the creation of summary files from the plotting.
* look at radius vs time plots for polyalanine to see if running for longer would help; 
* re-run polyalanine simulations (at least the repulsive ones) -- with translations and rotations removed we should get twice the mc steps for free

SHORTLY AFTERWARDS

* Update the tests to take the new single molecule detection into account

SIMULATIONS
    * redo simulations of ubiquitin+uim without tail, with rigid tail and with flexible tail
        * How to determine bound state when the potential is much higher because of bonded components? Subtract some kind of average?

--------------------------------------------------------------------------------
SOONER
--------------------------------------------------------------------------------

DO ALL THIS IN A PARALLEL BRANCH; DON'T BREAK THE EXISTING IMPLEMENTATION FOR SIMULATIONS!

RESUMING FROM SAMPLE
    * write unit test first
        * just copy the generator from the old one to keep the state?
        * https://www.gnu.org/software/gsl/manual/html_node/Copying-random-number-generator-state.html
    * directory name
    * change to this directory; write files inside it?
    * read filenames from last sample; make sure this is written last
    * update the child replicas from corresponding sample files
        * split molecules based on chains in the config and in the PDB files?
            * make sure the chains correspond
        * update potential
        * update acceptance ratios
        * UPDATE STEP!
            * can we? otherwise we could subtract the number of steps already done from the total, but that would mess up the numbering.
            * I think we can; it's a while loop.
            * we can read all these values off the replicas in the test to check that we're interpreting the files correctly. E.g. steps.

KERNEL CLEANUP AND TEMPLATING
    * remove unused code for e.g. old kernels and MC on the GPU, so we can see wtf is going on. -- partially done
        * remove compensated summation everywhere; we don't need it; it's pointless to keep it in
    * WHY do we still have two kernels? Can we seriously not merge the tiled kernel and the tiled NC kernel?
        * Why do we even call the NC kernel from the sample function? Just to subtract the crowders?
        * Can we not just use the normal potential if there are no crowders?
        * compare the pieces of code and see what remaining differences there are
    * Async version of NC kernel? Unnecessary if we merge them.
    * TEMPLATES! They should make everything better. https://www.google.com/search?q=cuda+kernel+template
    * Factor out calculations into functions using __device__ http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-function-qualifier
        * this is already done for DH; why isn't it done for everything else?
    * fast kernel for polymers with only one kind of residue -- no LJ lookup necessary! Constant Eij.
        * quick and dirty solution for now: use preprocessor directive to set a constant Eij for polyalanine
    * eventual runtime detection of crowders (presence of; inclusion of), flexibility, one residue type

    * replace shitty integer packing with expanded data structures
        * float4 for pos (x,y,z, PADDER / CROWDER / molecule (int))
        * float3 for meta (amino acid index (int), charge, vdW radius)
        * short4 for geometry (domain, bond, residue, chain) -- maybe char4? How high do we want to go? Do we want to template this, depending on max(domains, bonds, residues, chains)? Which is likely to be residues.
            * We could reorganise this to swap residue and molecule ids
                * Why do we even have residue IDs? We only compare them when the chains are the same, so why not just use array indices?
                * if we can eliminate these we could use short3; etc.
                * or short4 with the molecule moved off the pos.
                    * then we could also template this down to a short1 if the simulation is rigid.
                * if we can do this right now, we can eliminate one modff!

BUGS / POTHOLES TO INVESTIGATE
    * check if magnitude of bonded components is correct
        * actually, do we have any results for the bonded components from Kim?
        * could the tiny discrepancy from Kim's results be due to additional nonbonded components from inside segments? (There would be no inter-domain contribution because Kim & Hummer's model doesn't have a flex move).

CLEANUP / REFACTOR
    * outstanding issue: fix formatting of boundconformations file
        * only one value per replica; put pdb file on the same line

    * what is fileindex used for? It seems pretty useless. It's not even used in postprocessing.

    * stop outputting rotation / translation (no longer relevant)
        * but only if compiled with flexible linkers?

UNIT TESTS
    * more extensive potential unit tests: add potential test with all the weird geometry features, i.e. diubiquitin with one molecule and two chains. Maybe two diubiquitin, so we have two molecules with two chains each and can test absolutely everything.

--------------------------------------------------------------------------------
LATER
--------------------------------------------------------------------------------

POTHOLES
    * clean up temperature / translation step / rotation step code and figure out exactly what is happening when the number of replicas is 1. Write a unit test for this. Is this a bug?
    
    * fix chain processing
        * use chain names if they exist
        * fix old PDB files with chain id in the wrong place (WTF)

    * make sure all the non-crowders are actually loaded before all the crowders (don't rely on the input file to be correct)

THESIS
    * Verification & Validation
    * Applications
    * Conclusions
    * Go back and add conclusions to introduction

CLEANUP / REFACTOR
    * Why is the GL broken for some simulations?
    * Try to silence that annoying compilation error

BENCHMARKING
    * do simulations with linkers give better results than rigid simulations? (What does "better" mean?)
    * how much overhead is caused by the flexible linkers (on the CPU and on the GPU)?

--------------------------------------------------------------------------------
MUCH LATER / FUTURE WORK
--------------------------------------------------------------------------------

OPTIMISATION
    * why not precalculate the LJ coefficients which are independent from r?
        * We could definitely at least store Eij instead of eij.
        * How much extra storage / memory transfer overhead would be required for 3 coefficients (3EijSigij, 2Eij and 2^(1/6)Sigij)?
        * Maybe do it and test it? float3 table instead of float.

    * instead of storing pairs of residue integer properties in floats for transfer to GPU, add more floats

CLEANUP
    * convert all printfs / fprintfs to streams and all char arrays to strings
    * Eliminate extraneous preprocessor directives
    * factor the compensated summation out of Potential; add it in in a subclass later (although it's probably not necessary anyway)
    * Eliminate the MCSearch method and make everything call shared sub-methods

TESTS
    * unit test for parsing various input files (amino acids, torsions, etc..)
    * Multiple GPUs?  Does that work?  It should just work.
