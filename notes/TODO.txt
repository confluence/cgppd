--------------------------------------------------------------------------------
NOW
--------------------------------------------------------------------------------

* BUG: get MC test working with CUDA

--------------------------------------------------------------------------------
THEN
--------------------------------------------------------------------------------

STRUCTURE

* Linkers, etc. don't actually *need* to be arrays. Just keep them as vectors?

TEST

* make a main.h
* write unit tests for all the things

GRAAAAAAH, CLEAN UP MAIN

* cuda init -- need another function for this; done all over the place
* cuda destructor

* only one twister for whole simulation
* object for whole simulation + constructor
* SimulationData already exists -- make a constructor!
* clean up stuff for reading commandline params and reading args from file (ewwwwwww)

CLEANUP
* Reorder methods and attributes, especially in header.  SETUP, MC MOVES, POTENTIAL CALCULATION
* put initRNGs in init of replica and freeRNGs in destructor (OBSOLETE -- should not be pre-replica)
* MOLECULE: constructor / destructor
    * reserveResidueSpace not consistently used?
    * maybe use init from pdb function with rotation / translation params?
    * make Molecule::rotate call Molecule::setRotation, etc.?
* AMINO ACIDS
    * clean up read from file

FIX
* update simulation read / save to use DCD format
    * put checkpointing back in -- this is the same thing.
    * http://stackoverflow.com/questions/2107330/how-to-get-a-special-version-of-a-file-in-mercurial

--------------------------------------------------------------------------------
SOON
--------------------------------------------------------------------------------

PROCESSING
* actually look at processing code and figure out what it does

WRITE
* Thesis skeleton
* Poster
* Background chapter
    * Visualisation: graphs of LJ and DH potential vs residue distance (? -- for different types)
* Implementation

ADD
* Extra MC moves (just domain rotation?) on GPU?
* Make angle terms, crankshaft moves optional; test efficiency / accuracy of including them
* Make flexing optional; doesn't really work in cases with flexible loops coming out of domains.
* Validation with a simple test case
* Is the caching stuff actually a good idea, or is it just overhead?
    * Write another version of the CPU bond calculation, which throws out the caching and calculates everything
* What happens if molecule consists of multiple chains?

TEST
Potential:
* test data
* !!! check performance of CPU NC E with doubles / floats
* unit test for kahan sums, repulsive crowding

TEST
* write an end-to-end test for optimisation comparisons
    * is component-wise addition of vectors important?
    * is caching of internal potential subtotals important?

--------------------------------------------------------------------------------
LATER
--------------------------------------------------------------------------------

* Nice examples to go in paper

--------------------------------------------------------------------------------
EVENTUALLY
--------------------------------------------------------------------------------

OPTIMISE

* is it *actually* worth summing vector components separately?

* init of gpu memory seems slower (underlying software change?)

* Now that there's more time, try doing stuff on GPU:
    * one molecule only (since only one molecule will have internal changes?)
    * but then we have to cache at the molecule level at least, so that potential comparison works
    * LJ/DH seems like a really good idea
	* single kernel based on segments, or aditional kernel just for internal segments?
    * Friedrichs, et al.have a kernel for bonded forces

CLEANUP
* Make CPU version compile -- now compiles, but not without CUDA libraries.  Need to fix makefile.

ADD
* Multiple GPUs?  Does that work?
